// /*
//  *
//  * Copyright 2015 gRPC authors.
//  *
//  * Licensed under the Apache License, Version 2.0 (the "License");
//  * you may not use this file except in compliance with the License.
//  * You may obtain a copy of the License at
//  *
//  *     http://www.apache.org/licenses/LICENSE-2.0
//  *
//  * Unless required by applicable law or agreed to in writing, software
//  * distributed under the License is distributed on an "AS IS" BASIS,
//  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  * See the License for the specific language governing permissions and
//  * limitations under the License.
//  *
//  */

// // Package main implements a server for Greeter service.
// package grpcserver

// import (
// 	"context"
// 	"flag"
// 	"fmt"
// 	"log"
// 	"net"

// 	pb "github.com/gabspt/ConnectionStats/connstatsprotobuf"
// 	//"github.com/gabspt/ConnectionStats/internal/flowtable"
// 	//"github.com/gabspt/ConnectionStats/cmd/ebpf"
// 	//"github.com/vishvananda/netlink"
// 	"google.golang.org/grpc"
// )

// var (
// 	port      = flag.Int("port", 50051, "The server port")
// )

// // server is used to implement helloworld.GreeterServer.
// type server struct {
// 	pb.UnimplementedStatsServiceServer
// }

// func (s *server) CollectStats(ctx context.Context, req *pb.StatsRequest) (*pb.StatsReply, error) {
// 	log.Printf("Received request")
// 	fmt.Printf("fmt Print")
// 	response := &pb.StatsReply{}
// 	//response.Connstat=ft.GetConnList()
// 	//connlist := s.ft.GetConnList()
// 	connlist := ft.GetConnList()
// 	fmt.Printf("connlist %v\n", connlist)
// 	for _, conn := range connlist {
// 		connMsg := &pb.ConnectionStat{
// 			AIp:        conn.AIp.String(),
// 			BIp:        conn.BIp.String(),
// 			APort:      uint32(conn.APort),
// 			BPort:      uint32(conn.BPort),
// 			PacketsIn:  conn.Packets_in,
// 			PacketsOut: conn.Packets_out,
// 			TsIni:      conn.Ts_ini,
// 			TsFin:      conn.Ts_fin,
// 			BytesIn:    conn.Bytes_in,
// 			BytesOut:   conn.Bytes_out,
// 		}
// 		fmt.Printf("connMsg %v\n", connMsg)
// 		response.Connstat = append(response.Connstat, connMsg)
// 	}
// 	fmt.Printf("%v\n", response)
// 	return response, nil
// }

// func main() {
// 	flag.Parse()
// 	//Configure gRPC server
// 	lis, errlis := net.Listen("tcp", fmt.Sprintf(":%d", *port))
// 	if errlis != nil {
// 		log.Fatalf("failed to listen: %v", errlis)
// 	}
// 	s := grpc.NewServer()
// 	pb.RegisterStatsServiceServer(s, &server{})
// 	log.Printf("server listening at %v", lis.Addr())
// 	if errs := s.Serve(lis); errs != nil {
// 		log.Fatalf("failed to serve: %v", errs)
// 	}
// }
